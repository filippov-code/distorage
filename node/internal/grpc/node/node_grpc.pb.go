// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: node.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Node_Debug_FullMethodName                = "/node.Node/Debug"
	Node_SayHello_FullMethodName             = "/node.Node/SayHello"
	Node_Subscribe_FullMethodName            = "/node.Node/Subscribe"
	Node_SendUploadedReplica_FullMethodName  = "/node.Node/SendUploadedReplica"
	Node_SendUploadedMetadata_FullMethodName = "/node.Node/SendUploadedMetadata"
	Node_GetReplica_FullMethodName           = "/node.Node/GetReplica"
	Node_SendRecoveryMetadata_FullMethodName = "/node.Node/SendRecoveryMetadata"
	Node_UpdateMetadata_FullMethodName       = "/node.Node/UpdateMetadata"
	Node_DeleteReplica_FullMethodName        = "/node.Node/DeleteReplica"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	SendUploadedReplica(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendUploadedReplicaRequest, SendUploadedReplicaResponse], error)
	SendUploadedMetadata(ctx context.Context, in *SendUploadedMetadataRequest, opts ...grpc.CallOption) (*SendUploadedMetadataResponse, error)
	GetReplica(ctx context.Context, in *GetReplicaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetReplicaResponse], error)
	SendRecoveryMetadata(ctx context.Context, in *SendRecoveryMetadataRequest, opts ...grpc.CallOption) (*SendRecoveryMetadataResponse, error)
	UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*UpdateMetadataResponse, error)
	DeleteReplica(ctx context.Context, in *DeleteReplicaRequest, opts ...grpc.CallOption) (*DeleteReplicaResponse, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebugResponse)
	err := c.cc.Invoke(ctx, Node_Debug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Node_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, Node_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SendUploadedReplica(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendUploadedReplicaRequest, SendUploadedReplicaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[0], Node_SendUploadedReplica_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendUploadedReplicaRequest, SendUploadedReplicaResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Node_SendUploadedReplicaClient = grpc.ClientStreamingClient[SendUploadedReplicaRequest, SendUploadedReplicaResponse]

func (c *nodeClient) SendUploadedMetadata(ctx context.Context, in *SendUploadedMetadataRequest, opts ...grpc.CallOption) (*SendUploadedMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendUploadedMetadataResponse)
	err := c.cc.Invoke(ctx, Node_SendUploadedMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetReplica(ctx context.Context, in *GetReplicaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetReplicaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[1], Node_GetReplica_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetReplicaRequest, GetReplicaResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Node_GetReplicaClient = grpc.ServerStreamingClient[GetReplicaResponse]

func (c *nodeClient) SendRecoveryMetadata(ctx context.Context, in *SendRecoveryMetadataRequest, opts ...grpc.CallOption) (*SendRecoveryMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendRecoveryMetadataResponse)
	err := c.cc.Invoke(ctx, Node_SendRecoveryMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*UpdateMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMetadataResponse)
	err := c.cc.Invoke(ctx, Node_UpdateMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DeleteReplica(ctx context.Context, in *DeleteReplicaRequest, opts ...grpc.CallOption) (*DeleteReplicaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReplicaResponse)
	err := c.cc.Invoke(ctx, Node_DeleteReplica_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility.
type NodeServer interface {
	Debug(context.Context, *DebugRequest) (*DebugResponse, error)
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	SendUploadedReplica(grpc.ClientStreamingServer[SendUploadedReplicaRequest, SendUploadedReplicaResponse]) error
	SendUploadedMetadata(context.Context, *SendUploadedMetadataRequest) (*SendUploadedMetadataResponse, error)
	GetReplica(*GetReplicaRequest, grpc.ServerStreamingServer[GetReplicaResponse]) error
	SendRecoveryMetadata(context.Context, *SendRecoveryMetadataRequest) (*SendRecoveryMetadataResponse, error)
	UpdateMetadata(context.Context, *UpdateMetadataRequest) (*UpdateMetadataResponse, error)
	DeleteReplica(context.Context, *DeleteReplicaRequest) (*DeleteReplicaResponse, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServer struct{}

func (UnimplementedNodeServer) Debug(context.Context, *DebugRequest) (*DebugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debug not implemented")
}
func (UnimplementedNodeServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedNodeServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNodeServer) SendUploadedReplica(grpc.ClientStreamingServer[SendUploadedReplicaRequest, SendUploadedReplicaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendUploadedReplica not implemented")
}
func (UnimplementedNodeServer) SendUploadedMetadata(context.Context, *SendUploadedMetadataRequest) (*SendUploadedMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUploadedMetadata not implemented")
}
func (UnimplementedNodeServer) GetReplica(*GetReplicaRequest, grpc.ServerStreamingServer[GetReplicaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetReplica not implemented")
}
func (UnimplementedNodeServer) SendRecoveryMetadata(context.Context, *SendRecoveryMetadataRequest) (*SendRecoveryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRecoveryMetadata not implemented")
}
func (UnimplementedNodeServer) UpdateMetadata(context.Context, *UpdateMetadataRequest) (*UpdateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}
func (UnimplementedNodeServer) DeleteReplica(context.Context, *DeleteReplicaRequest) (*DeleteReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplica not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}
func (UnimplementedNodeServer) testEmbeddedByValue()              {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	// If the following call pancis, it indicates UnimplementedNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Debug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Debug(ctx, req.(*DebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SendUploadedReplica_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).SendUploadedReplica(&grpc.GenericServerStream[SendUploadedReplicaRequest, SendUploadedReplicaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Node_SendUploadedReplicaServer = grpc.ClientStreamingServer[SendUploadedReplicaRequest, SendUploadedReplicaResponse]

func _Node_SendUploadedMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUploadedMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendUploadedMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SendUploadedMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendUploadedMetadata(ctx, req.(*SendUploadedMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetReplica_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetReplicaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).GetReplica(m, &grpc.GenericServerStream[GetReplicaRequest, GetReplicaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Node_GetReplicaServer = grpc.ServerStreamingServer[GetReplicaResponse]

func _Node_SendRecoveryMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRecoveryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SendRecoveryMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_SendRecoveryMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SendRecoveryMetadata(ctx, req.(*SendRecoveryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_UpdateMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdateMetadata(ctx, req.(*UpdateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DeleteReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DeleteReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_DeleteReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DeleteReplica(ctx, req.(*DeleteReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Debug",
			Handler:    _Node_Debug_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Node_SayHello_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Node_Subscribe_Handler,
		},
		{
			MethodName: "SendUploadedMetadata",
			Handler:    _Node_SendUploadedMetadata_Handler,
		},
		{
			MethodName: "SendRecoveryMetadata",
			Handler:    _Node_SendRecoveryMetadata_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _Node_UpdateMetadata_Handler,
		},
		{
			MethodName: "DeleteReplica",
			Handler:    _Node_DeleteReplica_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendUploadedReplica",
			Handler:       _Node_SendUploadedReplica_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetReplica",
			Handler:       _Node_GetReplica_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}
